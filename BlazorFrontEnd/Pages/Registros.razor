@page "/registros/{nombreTabla}"
@inject HttpClient Http

<!-- TÃ­tulo de la tabla -->
<h3>Registros de la Tabla: @nombreTabla</h3>

<!-- Buscador agregado -->
<input type="text" placeholder="Buscar..." class="form-control mb-3" 
       @bind="criterioBusqueda" @bind:event="oninput" />

@if (registros == null)
{
    <p>Cargando registros...</p>
}
else if (!RegistrosFiltrados.Any())
{
    <p>No se encontraron registros.</p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="AbrirModalNuevoRegistro">Agregar Nuevo Registro</button>

    <table class="table table-striped">
        <thead>
            <tr>
                @foreach (var columna in registros.First().Keys)
                {
                    <th>@columna</th>
                }
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var registro in RegistrosFiltrados)
            {
                <tr>
                    @foreach (var valor in registro.Values)
                    {
                        <td>@(valor?.ToString() ?? string.Empty)</td>
                    }
                    <td>
                        <button class="btn btn-warning me-2" @onclick="() => AbrirModalEditarRegistro(registro)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => EliminarRegistro(registro)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal para Agregar/Editar Registro -->
@if (mostrarModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content" style="background-color: #1a1a1a; color: #c4f0c5; border: 1px solid #34eb89;">
                <div class="modal-header">
                    <h5 class="modal-title">@accionModal Registro en @nombreTabla</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    @foreach (var columna in columnas)
                    {
                        <div class="mb-3">
                            <label class="form-label">@columna</label>
                            <input type="text" class="form-control" 
                                   style="background-color: #1a1a1a; color: #c4f0c5; border: 1px solid #34eb89;"
                                   value="@ObtenerValorColumna(columna)" 
                                   @oninput="(e) => ActualizarValorColumna(columna, e.Value?.ToString())" />
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button class="btn btn-primary" @onclick="GuardarRegistro">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string nombreTabla { get; set; } = string.Empty;

    private List<Dictionary<string, object?>>? registros;
    private Dictionary<string, object?> registroActual = new();
    private List<string> columnas = new();
    private bool mostrarModal = false;
    private string accionModal = "Agregar";
    private string criterioBusqueda = string.Empty;

    private IEnumerable<Dictionary<string, object?>> RegistrosFiltrados =>
        string.IsNullOrWhiteSpace(criterioBusqueda)
            ? registros
            : registros?.Where(r => r.Values.Any(v => 
                v?.ToString()?.Contains(criterioBusqueda, StringComparison.OrdinalIgnoreCase) ?? false));

    private void ActualizarValorColumna(string columna, string? valor)
    {
        if (registroActual.ContainsKey(columna))
        {
            registroActual[columna] = valor;
        }
        else
        {
            registroActual.Add(columna, valor);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarRegistros();
    }

    private async Task CargarRegistros()
    {
        try
        {
            registros = await Http.GetFromJsonAsync<List<Dictionary<string, object?>>>($"http://localhost:5179/api/proyecto/{nombreTabla}");
            if (registros != null && registros.Any())
            {
                columnas = registros.First().Keys.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los registros: {ex.Message}");
        }
    }

    private void AbrirModalNuevoRegistro()
    {
        registroActual = new Dictionary<string, object?>();
        accionModal = "Agregar";
        mostrarModal = true;
    }

    private void AbrirModalEditarRegistro(Dictionary<string, object?> registro)
    {
        registroActual = new Dictionary<string, object?>(registro);
        accionModal = "Editar";
        mostrarModal = true;
    }

    private async Task GuardarRegistro()
    {
        try
        {
            if (accionModal == "Agregar")
            {
                var response = await Http.PostAsJsonAsync($"http://localhost:5179/api/proyecto/{nombreTabla}", registroActual);
                if (response.IsSuccessStatusCode)
                {
                    await CargarRegistros();
                }
            }
            else if (accionModal == "Editar")
            {
                var primeraClave = columnas.First();
                var valorClave = registroActual[primeraClave];
                var url = $"http://localhost:5179/api/proyecto/{nombreTabla}/{primeraClave}/{valorClave}";

                var response = await Http.PutAsJsonAsync(url, registroActual);
                if (response.IsSuccessStatusCode)
                {
                    await CargarRegistros();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar el registro: {ex.Message}");
        }
        finally
        {
            CerrarModal();
        }
    }

    private async Task EliminarRegistro(Dictionary<string, object?> registro)
    {
        try
        {
            var primeraClave = columnas.First();
            var valorClave = registro[primeraClave];
            var url = $"http://localhost:5179/api/proyecto/{nombreTabla}/{primeraClave}/{valorClave}";

            var response = await Http.DeleteAsync(url);
            if (response.IsSuccessStatusCode)
            {
                registros?.Remove(registro);
                await CargarRegistros();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el registro: {ex.Message}");
        }
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }

    private object? ObtenerValorColumna(string columna)
    {
        registroActual.TryGetValue(columna, out var valor);
        return valor ?? string.Empty;
    }
}
