@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Net.Http.Json
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<section class="h-100 gradient-form" style="background-color: #eee;">
  <div class="container py-5 h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col-xl-10">
        <div class="card rounded-3 text-black">
          <!-- Contenedor de partículas -->
                <div id="tsparticles" style="width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: -1;"></div>
                
          <div class="row g-0">
            <div class="col-lg-6">
              <div class="card-body p-md-5 mx-md-4" style="position: relative;">
                
                <div class="text-center">
                  <h4 class="mt-1 mb-5 pb-1">Bienvenido al Inicio de Sesión</h4>
                </div>

                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                  <p>Por favor ingrese su información:</p>

                  <div data-mdb-input-init class="form-outline mb-4">
                    <InputText id="form2Example11" class="form-control" placeholder="Ingrese su usuario"
                               @bind-Value="loginModel.Username" />
                    <label class="form-label" for="form2Example11">Usuario</label>
                  </div>

                  <div data-mdb-input-init class="form-outline mb-4">
                    <InputText id="form2Example22" type="password" class="form-control"
                               @bind-Value="loginModel.Password" />
                    <label class="form-label" for="form2Example22">Contraseña</label>
                  </div>

                  <div class="text-center pt-1 mb-5 pb-1">
                    <button data-mdb-button-init data-mdb-ripple-init
                            class="btn btn-primary btn-block fa-lg gradient-custom-2 mb-3" type="submit">
                      Iniciar Sesión
                    </button>
                  </div>
                  
                </EditForm>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                }

              </div>
              
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5179/api/ControladorUsuarios/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                // Supongamos que el backend devuelve un objeto JSON con token y rol
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();

                await LocalStorage.SetItemAsync("authToken", loginResponse.Token); // Guarda el token en LocalStorage
                await LocalStorage.SetItemAsync("userRole", loginResponse.Rol); // Guarda el rol en LocalStorage

                // Redirige al usuario a la página de tablas
                Navigation.NavigateTo("/tablas");
            }
            else
            {
                // Error en el login
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
        public string Rol { get; set; }
    }
}
